{"atitle":"What are Meshes?","boxes":[{"text":"<br>Meshes are, when it comes down to it, edges, triangles ( Tris ) and vertices ( Verts ).<br>&nbsp;<br><br>The actual things you can see from a mesh whilst in-game are faces.<br>Faces are made from two edges or more and create a two dimensional surface<br>( There is no height to the surface. Think of it as a piece of paper, infinitely thin. )<br>&nbsp;<br><br>Vertices are individual points, they do not form any 3d geometry. They are only the fundamentals of them.<br>A connection between two Verts is called an Edge. This is still no 3d geometry but it's the fundamental for having faces.<br>A triangle is the connection between three vertices that each share a connection to the other two;<br>Although I shouldn't have to explain the simplest of geometric shapes to you.<br>&nbsp;<br><br>There is also Quads and N-gons.<br>A quad is a connection between 4 Vertices. Quad as in Quadratic, yes. It's the ultimate piece of 3d paper.<br>A N-gon is a singular face made from 5 points or more. N as in Number. N-Gon. 5-Gon, 7-gon, 9-gon. ( pentagon, heptagon, nonagon ) <br>&nbsp;<br><br><br>","contents":[],"border_w":"5px 0px 0px","border_c":"rgb(100, 218, 255)","chapter":""},{"text":"Geometry, Quads and N-gons can be concave. If you manage to make Tris concave, you will receive a god damn medal.<br>What this means it that the 3d geometry from any of the above bulges inwards. As if you bent them.<br>Geometry without holes or dents is Convex. It can be handy to look up examples online!","contents":[{"imguseurl":"0","imgsize":"500","imgn":"a2ab5a47b55d576c71218f33b09dc508.png","imgn_original":"concave_vs.png","img_ext":"png"}],"border_w":"5px 0px 0px","border_c":"rgb(100, 255, 134)","chapter":"Concave vs Convex"},{"text":"A general rule : You want your 3d model is to have the least amount possible of Vertices, Edges and Tris.<br>The less you have, the cheaper the model is. Both in geometry and in rendering.<br>For Source, all faces will have to become Tris in order to work with source, this is the case for most game engines.<br>In fact at some fundamental level, all geometry is divided up into triangles for pretty much all engines.<br>When exporting to Source Engine file formats, this process happens automatically.<br>Additionally,\n Source has limits here. You can't have millions of vertices in one \nmodel. Plus, the limit for one model differs depending on what you use. \nFor example Portal 2 &amp; SFM's studiomdl have higher limits.","contents":[],"border_w":"5px 0px 0px","border_c":"rgb(100, 218, 255)","chapter":""},{"text":"In order to properly receive a material, there is also a requirement for texture coordinates.<br>The mesh needs a UV map in order to know how to display which parts of your Material.<br><br>You can consider UV Maps as two dimensional Origami Unfolds of your 3d model.<br>Note here, Unfolds. ( Plural! ) UV maps can be cut into several pieces, or several \"UV-Islands\" <br>&nbsp;<br>Beginners usually face hardships with them, because it can be hard to grasp how the result will be, when setting up the \"Seams\".<br>( Edges marked for a cut when \"unwrapping\" a model. )<br>Also, Blender can be a real pain when it comes to unwrapping.<br>You either understand them perfectly fine from previous experience or you will have to get an understanding for them.<br>This can be a time consuming process but in the end you will be able to tell intuitively where to place seams.","contents":[],"border_w":"5px 0px 0px","border_c":"rgb(100, 218, 255)","chapter":""}],"selfid":"52d2393cfb69b613b1c2ceabe325e807"}