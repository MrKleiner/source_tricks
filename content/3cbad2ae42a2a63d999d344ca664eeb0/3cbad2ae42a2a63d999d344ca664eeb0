{"atitle":"Shaders and how they are structured","boxes":[{"border":"","hasborder":true,"chapter":"purpose of .cpp, .fxc & .vcs Files","text":"PGRpdj5TaGFkZXJzIGluIFNvdXJjZSBjb21lIGluIHZhcmlvdXMgZm9ybWF0cy48L2Rpdj48ZGl2PkZpbGUtZm9ybWF0cyB5b3Ugd2lsbCBlbmNvdW50ZXIgaW5jbHVkZSAuZnhjLCAuY3BwLCAudmNzLCAucHNoLCAuaCBhbmQgLnZzaDwvZGl2PjxkaXY+SG93ZXZlciB3ZSB3aWxsIG9ubHkgYmUgbG9va2luZyBhdCAuY3BwLCAuZnhjIGFuZCAudmNzIGZpbGVzIGFzIHBzaCBhbmQgdnNoIGFyZSBvdXRkYXRlZCBhbmQgLmggYXJlIG5vdCBuZWNlc3NhcmlseSByZXF1aXJlZDwvZGl2PjxkaXY+PGJyPjwvZGl2PjxkaXY+U28gbGV0cyBiZWdpbiB3aXRoIHRoZSBiYXNpY3MuIERJU0NMQUlNRVIgOiBUaGlzIGNvZGUgaXMgbm90IHN1cHBvc2VkIHRvIHdvcmssIGl0cyBzdXBwb3NlZCB0byB0ZWFjaCB5b3UgaG93IGl0IHdvdWxkIGxvb2sgbGlrZTxicj48L2Rpdj48ZGl2Pjxicj48L2Rpdj48ZGl2Pkkgc3dlYXIgSWYgZGtmbHNkamZsOyBzZGpmIGtzZGxqZiA7bHNkamYgO3NsZGpmIHM7ZGxmaiBzO2RsZmogO3NkamYgPC9kaXY+","iscode":false,"isvdccode":false,"contents":[]},{"border":"","hasborder":true,"chapter":".fxc","text":"PGI+LmZ4YzwvYj4gaXMgdGhlIFNoYWRlciBzb3VyY2UgZmlsZS4gSXRzIHRoZSBmdW5kYW1lbnRhbCBjb2RlIGFuZCBpbnN0cnVjdGlvbnMgdGhhdCB3aWxsIGJlIHVzZWQgYnkgdGhlIEdQVTxicj5JdCdzIHdyaXR0ZW4gaW4gdGhlIEhMU0wgbGFuZ3VhZ2UsIEkgcGVyc29uYWxseSBkaXNjb3VyYWdlIHlvdSBmcm9tIGxvb2tpbmcgaW50byB0aGUgbGFuZ3VhZ2UgaXRzZWxmIGFzIHlvdSB3aWxsIGxlYXJuPGJyPjxkaXY+aG93IHRvIHVzZSBITFNMIGV4dHJlbWVseSBxdWlja2x5ICggdGhlIHN5bnRheCBpcyBlYXN5IGFmICk8L2Rpdj48ZGl2Pjxicj48L2Rpdj48ZGl2PkEgLmZ4YyBmaWxlIGlzIHNlcGFyYXRlZCBpbnRvIHNvbWUgc2VjdGlvbnMuPC9kaXY+PGRpdj5UaGUgZmlyc3Qgc2VjdGlvbiB5b3Ugd291bGQgc2VlIGlzIHByb2JhYmx5IGEgYmlnIGNvbW1lbnQgc2VjdGlvbiB0aGF0IGV4cGxhaW5zIHRoZSBwdXJwb3NlIG9mIHRoZSBzaGFkZXIsIGFsdGhvdWdoIHRoaXMgaXMgbm90IHRlY2huaWNhbGx5IHJlcXVpcmVkLCBpdCBoZWxwcyBhIGJpdCBpZiB5b3Ugd2FudCB0byBtYWtlIHNvbWUgaW1wb3J0YW50IG5vdGVzIGFib3V0IHRoZSBmdW5jdGlvbmFsaXR5IG9mIHRoZSBzaGFkZXIgb3Igd2hhdCBpdCBkb2VzLjwvZGl2PjxkaXY+U29tZSBzaGFkZXJzIGhhdmUgd2VpcmQgYWJzdHJhY3QgbmFtZXMgYW5kIHRlbGxpbmcgcGVvcGxlIHdoYXQgaXQgZG9lcyBpbiB0aGUgZnhjIG1pZ2h0IGJlIGdvb2QuICggYWxzbyBpdCBsb29rcyBwcmV0dHkgYmFkIGFzcyBhbmQgeW91IGNhbiBwdXQgY3JlZGl0cyB0aGVyZSApPC9kaXY+","iscode":false,"isvdccode":false,"contents":[]},{"border":"","hasborder":false,"chapter":"comment","text":"Ly89PT09PT0gQ29weXJpZ2h0IMKpIDE5OTYtMjAwNywgVmFsdmUgQ29ycG9yYXRpb24sIEFsbCByaWdodHMgcmVzZXJ2ZWQuID09PT09PT0vLzxicj4vLzxicj4vLz09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09Ly88YnI+","iscode":false,"isvdccode":true,"contents":[]},{"border":"","hasborder":false,"chapter":"","text":"Ly89PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PTxicj4vLzxicj4vLyBQaHlzaWNhbGx5IEJhc2VkIFJlbmRlcmluZyBwaXhlbCBzaGFkZXIgZm9yIGJydXNoZXMgYW5kIG1vZGVscyAtIGludGVuZGVkIHRvIG92ZXJyaWRlIHN0b2NrIG1hdGVyaWFsczxicj4vLzxicj4vLz09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09","iscode":false,"isvdccode":true,"contents":[]},{"border":"","hasborder":false,"chapter":"","text":"Ly89PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PTxicj4vLzxicj4vLyBGYWtlIEF0bW9zcGhlcmUgU2hhZGVyIENyZWF0ZWQgYnkgV2hpdGVfUmVkX0RyYWdvbnMgKCBTaGlyb0RreHRybzIjODc1MCApPGJyPi8vPGJyPi8vPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT08YnI+","iscode":false,"isvdccode":true,"contents":[]},{"border":"","hasborder":false,"chapter":"static and dynamic combos","text":"PGRpdj5OZXh0IHVwIGNvbWVzIHN0YXRpYyBhbmQgZHluYW1pYyBjb21ibyBkZWNsYXJhdGlvbnM8L2Rpdj48ZGl2PlRoaXMgYXJlIGJhc2ljYWxseSB0aGUgaWYtc3RhdGVtZW50cyBvZiBTaGFkZXJzIGZvciBleHRlcm5hbCBib29scyBhbmQgaW50cy48L2Rpdj48ZGl2PlRoZXkgYXJlIHVzZWQgdG8gZHJhc3RpY2FsbHkgY3V0IGRvd24gb24gdGhlIG5lY2Vzc2FyeSBjYWxjdWxhdGlvbnMgdG8gbWFrZSwgZXNwZWNpYWxseSBiYWNrIHRoZW4gaXQgd2FzIGNyYXp5IGV4cGVuc2l2ZSB0byBhY3R1YWxseSBjYWxjdWxhdGUgdGhpcyBzdHVmZiBvbiB0aGUgaGFyZHdhcmUgb2YgdGhlIHRpbWUgc28gaXQgd2FzIGltcG9ydGFudCBhbmQgc3RpbGwgaXMgdG8gbWFrZSBzdXJlIHlvdSBvbmx5IGNhbGN1bGF0ZSBhcyBtdWNoIGFzIG5lY2Vzc2FyeSBvbiB0aGUgR1BVLjxicj48L2Rpdj48ZGl2PkxldHMgdGFrZSBhIHN0YXRpYyBhcyBhbiBleGFtcGxlLiBUaGV5IGFyZSBkZWNsYXJlZCBhcyBzdWNoLCBob3dldmVyIGl0IGRvZXNuJ3QgbmVlZCB0byBiZSAwLi4xIGl0IGNhbiBhbHNvIGJlIDAuLjkgb3IgYW55IG51bWJlciBiZWxvdyA5IGFuZCBhYm92ZTwvZGl2PjxkaXY+SGVyZSBhcmUgdHdvIGNvbW1vbiBvbmVzPGJyPjwvZGl2Pg==","iscode":false,"isvdccode":false,"contents":[]},{"border":"","hasborder":false,"chapter":"","text":"Ly8gU1RBVElDXDogIkZMQVNITElHSFQiICAgICAgICAgICAgICAgICAiMC4uMSI8YnI+Ly8gU1RBVElDOiAiRkxBU0hMSUdIVERFUFRIRklMVEVSTU9ERSIgICIwLi4yIjxicj4=","iscode":false,"isvdccode":true,"contents":[]},{"border":"","hasborder":false,"chapter":"","text":"QWZ0ZXIgU3RhdGljcyB3ZSBkZWNsYXJlIER5bmFtaWNzLiBOb3RlIHRoYXQgbm90IGFsbCBvZiB0aGVzZSBhcmUgcGFydGljdWxhcmx5IHJlcXVpcmVkIGZvciB5b3VyIFNoYWRlciBhbmQgdGhpcyBraW5kIG9mIHN0dWZmIHdvcmtzIGRpZmZlcmVudGx5IGJldHdlZW4gU1AgYW5kIE1QIHNvbWV0aW1lcy4gRm9yIGV4YW1wbGUsIHlvdSBjYW4ndCBoYXZlIG1vZGVsIGxpZ2h0bWFwcGluZyBvbiBTUCBhbmQgdGhlcmVmb3JlIExJR0hUTUFQUEVEX01PREVMIGFzIGEgZHluYW1pYyBpcyBub3QgcmVxdWlyZWQuIE9yIHlvdXIgc2hhZGVyIG1pZ2h0IG5vdCBldmVuIG5lZWQgYSBmbGFzaGxpZ2h0IChmdWxsYnJpZ2h0IG9uZXMgZm9yIGV4YW1wbGUp","iscode":false,"isvdccode":false,"contents":[]},{"border":"","hasborder":false,"chapter":"","text":"Ly8gRFlOQU1JQzogIldSSVRFV0FURVJGT0dUT0RFU1RBTFBIQSIgICIwLi4xIjxicj4vLyBEWU5BTUlDOiAiUElYRUxGT0dUWVBFIiAgICAgICAgICAgICAgIjAuLjEiPGJyPi8vIERZTkFNSUM6ICJOVU1fTElHSFRTIiAgICAgICAgICAgICAgICAiMC4uNCI8YnI+Ly8gRFlOQU1JQzogIldSSVRFX0RFUFRIX1RPX0RFU1RBTFBIQSIgICIwLi4xIjxicj4vLyBEWU5BTUlDOiAiRkxBU0hMSUdIVFNIQURPV1MiICAgICAgICAgIjAuLjEiPGJyPg==","iscode":false,"isvdccode":true,"contents":[]},{"border":"","hasborder":false,"chapter":"skips","text":"PGRpdj5OZXh0IHVwIHdlIGhhdmUgc2tpcHMuIFdoYXQgYXJlIHNraXBzIHlvdSBtaWdodCBhc2s/IERvbid0IHdvcnJ5IEknbGwgZXhwbGFpbiBhZnRlciBhdHRlbXB0aW5nIHRvIHdhc3RlIHlvdXIgdGltZSB3aXRoIGEgbG90IG9mIGJ1bGxzaGl0IHRleHQ8L2Rpdj48ZGl2PlNraXBzIGFyZSBhIHdheSB0by4uLiBoZXJlIGl0IGNvbWVzLi4uPGk+IHNraXAgPC9pPmNlcnRhaW4gY29tYmluYXRpb25zISEhIFllcywgWWVzLCBubyBuZWVkIHRvIGFwcGxhdXNlLiBUaGUgTUlUIGVkdWNhdGlvbiB3YXMgd29ydGggaXQhPC9kaXY+PGRpdj5UaGlzIGlzIHVzZWZ1bCBpZiB5b3Uga25vdyB0aGF0IGNlcnRhaW4gZmVhdHVyZXMgY2FuJ3QgYmUgdXNlZCB3aXRoIGVhY2ggb3RoZXIuPGJyPkl0IGFsc28gc2F2ZXMgYSB0b24gb2YgY29tcGlsaW5nIHRpbWUgYXMgc29tZXRpbWVzIHRoaXMgY2FuIHNhdmUgeW91IHRob3VzYW5kcyBvZiBjb21iaW5hdGlvbnMuPC9kaXY+PGRpdj48YnI+PC9kaXY+PGRpdj5IZXJlJ3MgYSBncmVhdCBleGFtcGxlIGZyb20gVmFsdmVzIGNvZGU8L2Rpdj48ZGl2PlRoaXMgbWFrZXMgaW50dWl0aXZlIHNlbnNlLCB5b3UgY2FuJ3QgaGF2ZSBkZXRhaWxibGVuZG1vZGVzIGlmIHlvdSBkb24ndCBldmVuIGhhdmUgYSBkZXRhaWx0ZXh0dXJlLjxicj48L2Rpdj4=","iscode":false,"isvdccode":false,"contents":[]},{"border":"","hasborder":false,"chapter":"","text":"Ly8gU0tJUDogKCRERVRBSUxURVhUVVJFID09IDAgKSAmYW1wOyZhbXA7ICggJERFVEFJTF9CTEVORF9NT0RFICE9IDAgKTxicj4=","iscode":false,"isvdccode":true,"contents":[]},{"border":"","hasborder":false,"chapter":"includes","text":"PGRpdj5BZnRlciBza2lwcyB3ZSB1c3VhbGx5IGFkZCBpbmNsdWRlcy4gVGhlc2UgYXJlIHVzZWZ1bCBpZiB5b3Ugd2FudCB0byB1c2UgY2VydGFpbiBTaGFkZXIgZnVuY3Rpb25zIG9yIGNhbGN1bGF0aW9ucyBidXQgZG9uJ3Qgd2FudCB0byBkZWNsYXJlIHRoZW0gaW4gZXZlcnkgc2hhZGVyLiBTbyB5b3UganVzdCBoYXZlIGEgc2VwYXJhdGUgZmlsZSB0aGF0IHlvdSBjYW4gcHV0IHN0dWZmIGludG8uPC9kaXY+PGRpdj5Ib3dldmVyIGtlZXAgaW4gbWluZCB0aGF0IHRoaXMgKmNvdWxkKiBpbmNyZWFzZSBjb21waWxlLXRpbWUgPGk+YW5kPC9pPiBmaWxlc2l6ZSBhcyBpdCBtaWdodCBhdHRlbXB0IHRvIGluY2x1ZGUgZnVuY3Rpb25zIHRoYXQgYXJlbid0IGV2ZW4gdXNlZC48YnI+PC9kaXY+","iscode":false,"isvdccode":false,"contents":[]},{"border":"","hasborder":false,"chapter":"","text":"PGRpdj4jaW5jbHVkZSAiY29tbW9uX2ZsYXNobGlnaHRfZnhjLmgiPC9kaXY+PGRpdj4jaW5jbHVkZSAiY29tbW9uX3ZlcnRleGxpdGdlbmVyaWNfZHg5LmgiPGJyPjwvZGl2Pg==","iscode":false,"isvdccode":true,"contents":[]},{"border":"","hasborder":false,"chapter":"Samplers and PSREG's","text":"PGRpdj5BZnRlciBhbGwgb2YgdGhhdCB3ZSBjYW4gZGVjbGFyZSBuYW1lcyBhbmQgdXNlZCBjb25zdGFudCByZWdpc3RlcnMsIGRlZmluZSBuYW1lcyBmb3IgY2VydGFpbiBmbG9hdHMgZnJvbSBhIGNvbnN0YW50IHJlZ2lzdGVycyBhbmQgc2FtcGxlcnMgZm9yIHRleHR1cmVzPC9kaXY+PGRpdj5Db25zdGFudCBSZWdpc3RlcnMgKCBQU1JFRydzICkgYXJlIGEgc29ydCBvZiBtZW1vcnkgdGhhdCdzIHNldCB3aXRoIHZhbHVlcyBzbyB0aGF0IHRoZSBzaGFkZXIgY2FuIHVzZSB0aGVtLjxicj5TYW1wbGVycyBhcmUgYSB3YXkgdG8gYXNzaWduIGEgdGV4dHVyZSB0byB0aGUgc2hhZGVyLiBGb3IgdGhlIGFtb3VudCBvZiBsaW1pdHMgYW5kIG1vcmUuLi4gc2VlIDxhIGhyZWY9Imh0dHBzOi8vbXJrbGVpbmVyLmdpdGh1Yi5pby9zb3VyY2VfdHJpY2tzLz9sdD00MTA3OTY5MSI+dGhpcyBhcnRpY2xlPC9hPjwvZGl2PjxkaXY+c2hvcnQgYW5zd2VyIDo8YnI+PC9kaXY+PGRpdj4oIHNtMy4wIGFsbG93cyBmb3IgMTYgc2FtcGxlcnMgcmFuZ2luZyBmcm9tIDAtMTUgYW5kIDIyNCBmbG9hdCBjb25zdGFudCByZWdpc3RlcnMgcmFuZ2luZyBmcm9tIDAtMjIzICkgPGJyPjwvZGl2Pg==","iscode":false,"isvdccode":false,"contents":[]},{"border":"","hasborder":false,"chapter":"","text":"PGRpdj4vLyByZWdpc3RlcnMgbXVzdCBiZSBkZWNsYXJlcyBhcyBjWDxicj48L2Rpdj48ZGl2PmNvbnN0IGZsb2F0NCBnX1NlbGZJbGx1bVRpbnRfYW5kX0JsZW5kRmFjdG9yCTogcmVnaXN0ZXIoIGM0ICk7PGJyPjwvZGl2PjxkaXY+PGJyPjwvZGl2PjxkaXY+Ly8gVGhpcyBpcyBub3QgcmVxdWlyZWQsIHlvdSBjb3VsZCBqdXN0IHNwZWNpZnkgZ19TZWxmSWxsdW1UaW50X2FuZF9CbGVuZEZhY3Rvci54eXogb3IgLnc8L2Rpdj48ZGl2PiNkZWZpbmUgZ19TZWxmSWxsdW1UaW50CQkJCWdfU2VsZklsbHVtVGludF9hbmRfQmxlbmRGYWN0b3IueHl6PGJyPiNkZWZpbmUgZ19EZXRhaWxCbGVuZEZhY3RvcgkJCWdfU2VsZklsbHVtVGludF9hbmRfQmxlbmRGYWN0b3Iudzxicj48L2Rpdj48ZGl2Pjxicj48L2Rpdj48ZGl2Pi8vIFNhbXBsZXJzIG11c3QgYmUgZGVjbGFyZXMgYXMgc1g8L2Rpdj48ZGl2PnNhbXBsZXIgQmFzZVRleHR1cmVTYW1wbGVyCQk6IHJlZ2lzdGVyKCBzMCApOzwvZGl2Pg==","iscode":false,"isvdccode":true,"contents":[]},{"border":"","hasborder":false,"chapter":"Pixelshader VS input","text":"PGRpdj5UaGUgUGl4ZWxzaGFkZXIgVmVydGV4c2hhZGVyIGlucHV0cyBhcmUgbmV4dC48L2Rpdj48ZGl2PkluIHRoaXMgc2VjdGlvbiB3ZSByZWNlaXZlIHRoaW5ncyBmcm9tIHRoZSB2ZXJ0ZXggc2hhZGVyIHN1Y2ggYXMgdGV4dHVyZSBjb29yZGluYXRlcyBhbmQgd29ybGRub3JtYWxzLCB3b3JsZHBvc2l0aW9uIGV0YzwvZGl2PjxkaXY+SW1wb3J0YW50IGhlcmUgaXMgdGhhdCB0aGUgdGV4Y29vcmQgeW91IGFzc2lnbiB0byB0aGUgbmFtZSBpcyB0aGUgb25lIHRoYXQgaXRzIGFjdHVhbGx5IGJlaW5nIG91dHB1dHRlZCBhcyBvbiB0aGUgdmVydGV4IHNoYWRlci48L2Rpdj48ZGl2PnRoZSBuYW1lcyBkb24ndCBtYXR0ZXIgYXMgbG9uZyBhcyB5b3UgaGF2ZSB0aGUgc2FtZSB0ZXhjb29yZHMgaW4gdXNlIGFzIHRoZSB2ZXJ0ZXggc2hhZGVyPGJyPjwvZGl2Pg==","iscode":false,"isvdccode":false,"contents":[]},{"border":"","hasborder":false,"chapter":"","text":"c3RydWN0IFBTX0lOUFVUPGJyPns8YnI+ICAgIGZsb2F0MiBiYXNlVGV4Q29vcmQgICAgICAgICAgICAgOiBURVhDT09SRDA7IC8vIGJhc2ljYWxseSBVViBtYXA8YnI+ICAgIGZsb2F0NCBsaWdodEF0dGVudWF0aW9uICAgICAgICAgOiBURVhDT09SRDE7PGJyPiAgICBmbG9hdDMgd29ybGROb3JtYWwgICAgICAgICAgICAgIDogVEVYQ09PUkQyOzxicj4gICAgZmxvYXQzIHdvcmxkUG9zaXRpb24gICAgICAgICAgICA6IFRFWENPT1JEMzs8YnI+ICAgIGZsb2F0MyBwcm9qUG9zaXRpb24gICAgICAgICAgICAgOiBURVhDT09SRDQ7PGJyPn07","iscode":false,"isvdccode":true,"contents":[]},{"border":"","hasborder":false,"chapter":"Entry point - actual execution","text":"PGRpdj5BZnRlciBhbGwgdGhpcyBpcyBkb25lIHdlIGNhbiBhY3R1YWxseSBzdGFydCB3cml0aW5nIG91ciBzaGFkZXIuPC9kaXY+PGRpdj5mb3IgdGhpcyB3ZSBuZWVkIHRoZSBhY3R1YWwgZW50cnkgcG9pbnQgd2hpY2ggbG9va3MgbGlrZSBzby48L2Rpdj48ZGl2PkFkZGl0aW9uYWxseSBoZXJlIGlzIGFuIGV4YW1wbGUgb2Ygc29tZSBzaGFkZXIgY29kZTxicj48L2Rpdj4=","iscode":false,"isvdccode":false,"contents":[]},{"border":"","hasborder":false,"chapter":"","text":"Ly8gRW50cnkgcG9pbnQ8YnI+ZmxvYXQ0IG1haW4oUFNfSU5QVVQgaSkgOiBDT0xPUjxicj48ZGl2Pns8L2Rpdj48ZGl2Pjxicj48L2Rpdj48ZGl2Pi8vIGV4YW1wbGUgY29kZTxicj48L2Rpdj48ZGl2PmZsb2F0NCBPdXRwdXQgPSAwLDEsMCwwOyAvLyBHcmVlbiBjb2xvcjxicj48L2Rpdj48ZGl2PmZsb2F0IGZvZ0ZhY3RvciAgICA9IDA7IC8vIG5vdGhpbmc8L2Rpdj48ZGl2PmZsb2F0IFBpeGVsRm9nVHlwZSA9IDA7IC8vIG5vdGhpbmc8YnI+PC9kaXY+PGRpdj5pbnQgdG9uZW1hcG1vZGUgICAgPSAwOyAvLyBub3RoaW5nPC9kaXY+PGRpdj5mbG9hdCBXcml0ZURlcHRoVG9BbHBoYSA9IDA7IC8vIHN0aWxsIG5vdGhpbmc8YnI+PC9kaXY+PGRpdj48YnI+PC9kaXY+PGRpdj4vLyBOZWVkcyB0byByZXR1cm4gdmFsdWVzIGZvciB0aGVzZS4gVXN1YWxseSBtb3N0IG9mIHRoZW0gYXJlIGlucHV0cyBmcm9tIHZlcnRleCBzaGFkZXIgb3IgZHluYW1pYyBjb21ib3M8YnI+PC9kaXY+PGRpdj5yZXR1cm4gT3V0cHV0LCBmb2dGYWN0b3IsIFBpeGVsRm9nVHlwZSwgdG9uZW1hcG1vZGUsIFdyaXRlRGVwdGhUb0FscGhhLCBpLnByb2pQb3MueiApOzxicj48L2Rpdj48ZGl2Pn08YnI+PC9kaXY+","iscode":false,"isvdccode":true,"contents":[]},{"border":"","hasborder":true,"chapter":".vcs","text":"LnZjcyBpcyB0aGUgU2hhZGVyIGluIGl0cyBjb21waWxlZCBmb3JtLiBPayBidXQgd2hhdCBkb2VzIHRoYXQgbWVhbiwgY2FuJ3QganVzdCBzaGlwIHRoZSAuZnhjPzxicj5JbiBvcmRlciB0byBub3Qgd3JlY2sgeW91ciBncmFwaGljc2NhcmQgYW5kIGNhbGN1bGF0ZSBldmVyeXRoaW5nIGV2ZW4gd2hlbiBjZXJ0YWluIGVmZmVjdHMgYXJlbid0IHVzZWQ8YnI+dGhlIHNoYWRlciBpcyBzZXBhcmF0ZWQgaW50byBhIG11bHRpcGxlIG9mICJjb21ib3MiLiBDb25zaWRlciB0aGlzIGEgcG9zc2libGUgZXZlbnQgZXF1YXRpb24uPGJyPjxicj5XaXRoaW4gdGhlIC52Y3MgdGhpcyBpcyBzZXBhcmF0ZWQgaW50byBzdGF0aWMgYW5kIGR5bmFtaWMgY29tYm9zLiBXaHk/IExldHMgdGFrZSBWZXJ0ZXhMaXRHZW5lcmljIGFzIGFuIGV4YW1wbGUuPGJyPkxldHMganVzdCBjb25zaWRlciBTdGF0aWNzIGFuZCBEeW5hbWljcyBJbnRlZ2VycyBmb3Igbm93Li4uIFRoZXkgdXN1YWxseSBhY3QgbGlrZSBib29scyAoIDEgb3IgMCApIGJ1dCB0aGV5IGNhbiBiZSAwLTkgb3IgbW9yZTxicj48YnI+VmVydGV4TGl0R2VuZXJpYyBoYXMgc29tZXdoZXJlIGFyb3VuZCAyMCB0aGF0IGdvIGZyb20gMC0xLCB0d28gdGhhdCBnbyBmcm9tIDAtMiBhbmQgb25lIHRoYXQgZ29lcyBmcm9tIDAtOTxicj48ZGl2PlRoaXMgaXMgbm90IHRoZSBleGFjdCBhbW91bnQgYnV0IGl0IHNob3VsZCBicmluZyB0aGUgcG9pbnQgYWNyb3NzLiA8Zm9udCBjb2xvcj0iNGZmN2ZmIj48c3Bhbj4yMCAwMDAgMDAwPC9zcGFuPjwvZm9udD4gY29tYm9zIGlzIDxiPkEgTE9UPC9iPiBhbmQgc2F2aW5nIHRoZW0gYXMgc2VwYXJhdGUgc2hhZGVyIGZpbGVzIGlzIE5PVCBhbiBvcHRpb24hPC9kaXY+PGRpdj48aW1nIHNyYz0iaHR0cHM6Ly9jZG4uZGlzY29yZGFwcC5jb20vYXR0YWNobWVudHMvNDI3OTMxNTExMjIwNzMxOTI0LzEwMTM5NTE1ODI0NTIzMjY0MjAvdW5rbm93bi5wbmciIGFsdD0iaHR0cHM6Ly9jZG4uZGlzY29yZGFwcC5jb20vYXR0YWNobWVudHMvNDI3OTMxNTExMjIwNzMxOTI0LzEwMTM5NTE1ODI0NTIzMjY0MjAvdW5rbm93bi5wbmciIGNsYXNzPSJ0cmFuc3BhcmVudCBvdmVyZmxvd2luZ0hvcml6b250YWxPbmx5Ij48L2Rpdj4=","iscode":false,"isvdccode":false,"contents":[]},{"border":"","hasborder":true,"chapter":".cpp","text":"LmNwcCBpcyBzb21ldGhpbmcgbGlrZSB0aGUgbWFzdGVybWluZCBvciBlcnJyIGNvbnRyb2xsZXIgZm9yIHRoZSBTaGFkZXIuCiBJdCBzZXRzIHdoYXQgY29tYm8gc2hvdWxkIGJlIHVzZWQgYW5kIHdoYXQga2luZCBvZiBlZmZlY3RzIHNob3VsZCB0aGUgCmVuZ2luZSBjb25zaWRlciAoIGxpa2UgdHJhbnNsdWNlbmN5LCB3aGF0IGtpbmQgb2YgdmVydGV4IGZvcm1hdCBkbyB3ZSBuZWVkLi4uIGV0Yy4gKTxicj48ZGl2Pml0cyBhYnNvbHV0ZWx5IGNydWNpYWwgdG8gaGF2ZSBvbmUsIGl0IGhhcyB0byBiZSBpbmNsdWRlZCBpbiB5b3VyIHNoYWRlcnMgcHJvamVjdCwgd2l0aGluIHlvdXIgc29sdXRpb24gc28gdGhhdCB0aGUgc2hhZGVyIGlzIGV2ZW4gYmVpbmcgcmVjb2duaXNlZC48L2Rpdj48ZGl2PktlZXAgaW4gbWluZCB0aGF0IG92ZXJ3cml0aW5nIGV4aXN0aW5nIHNoYWRlcnMgKCBsaWtlIGZvciB2ZXJ0ZXhsaXRnZW5lcmljIGV0YyApIGlzIE5PVCBhbiBvcHRpb24gYW5kIHdpbGwgY3Jhc2ggeW91ciBnYW1lIHdpdGggYW4gZXJyb3IgbWVzc2FnZSBJRiB5b3UgYXR0ZW1wdCB0byB1c2UgdGhlIHNhbWUgbmFtZS48YnI+PC9kaXY+","iscode":false,"isvdccode":false,"contents":[]},{"border":"","hasborder":false,"chapter":"Includes, Convars and Constants","text":"PGRpdj5XaXRoaW4gdGhlIHNoYWRlciBjcHAgdGhlIGZpcnN0IHRoaW5nIHdlIHdpbGwgZGVjbGFyZSBpcyBpbmNsdWRlcy48L2Rpdj48ZGl2PllvdSBuZWVkIHRvIGluY2x1ZGUgIi5pbmMiIGZpbGVzIHdoaWNoIGlzIGJhc2ljYWxseSBhIHNldCBvZiBpbnN0cnVjdGlvbnMgZm9yIHRoZSAuY3BwIGZpbGUgdGhhdCB3aWxsIHRlbGwgaXQgd2hhdCBraW5kIG9mIHN0YXRpY3MgYW5kIGR5bmFtaWMgY29tYm9zIGhhdmUgdG8gYmUgc2V0IG9uIHRoZSBzaGFkZXIuIE5vdCBzZXR0aW5nIG9uZSBvciBzZXR0aW5nIG9uZSB0b28gbWFueSBpcyBub3QgYWxsb3dlZC48L2Rpdj48ZGl2Pjxicj48L2Rpdj48ZGl2PldlIGFsc28gQ0FOIG1vdmUgc29tZSB0aGluZ3MgZnJvbSB0aGUgY3BwIGZpbGUgaW50byBhIGhlYWRlciBmaWxlIHdoaWNoIEkgZGlkIGluIHRoaXMgZXhhbXBsZSwgSSBtb3ZlZCB0aGUgc3RydWN0IHNlY3Rpb24gb24gc29tZSBvZiBteSBuZXdlciBzaGFkZXJzIGludG8gYSBoZWFkZXJmaWxlIGJlY2F1c2UgdGhhdCB3YXkgaXRzIG1vcmUgZWFzaWx5IGFjY2Vzc2libGUsIGhvd2V2ZXIgSSBhZHZpc2UgYWdhaW5zdCB0aGlzIGlmIHlvdXIgaGVhZGVyIGlzIHZlcnkgdmVyeSBzaG9ydC48YnI+PC9kaXY+PGRpdj48YnI+PC9kaXY+PGRpdj5hZnRlciB0aGF0IHdlIGRlY2xhcmUgc29tZSBDb252YXJzLiBZb3UgbWlnaHQgYmUgZmFtaWxpYXIgd2l0aCB0aGVzZS4gTGlrZSBtYXRfc3BlY3VsYXIgYW5kIG1hdF9mdWxsYnJpZ2h0IGJ1dCB0aGVyZSBpcyBhbHNvIHNvbWUgb3RoZXJzIGxpa2UgbWF0X2x1eGVscyBhbmQgeW91IGNhbiBldmVuIGRlY2xhcmUgeW91ciBvd24gaGVyZSBmb3IgZGVidWcgcHVycG9zZXMhPC9kaXY+PGRpdj48YnI+PC9kaXY+PGRpdj5hbmQgb25jZSB3ZSBhcmUgZG9uZSB3aXRoIHRob3NlIHdlIGRlY2xhcmUgc29tZSBjb25zdGFudHMuIFRoaXMgaXMgbWFpbmx5IHNvIHdlIGNhbiB1c2UgbW9yZSByZWFsaXN0aWMgbmFtZXMgdGhhdCB3aWxsIGd1aWRlIHVzIHdoZW4gd2Ugc2V0IHVwIHNhbXBsZXJzLiBKdXN0IGxvb2sgYXQgdGhlIGV4YW1wbGUsIHdlIGJhc2ljYWxseSBnaXZlIGVhY2ggc2FtcGxlciBhIG5pY2tuYW1lITxicj48L2Rpdj4=","iscode":false,"isvdccode":false,"contents":[]},{"border":"","hasborder":false,"chapter":"","text":"Ly8gSW5jbHVkZXMgZm9yIGFsbCBzaGFkZXJzPGJyPiNpbmNsdWRlICJCYXNlVlNTaGFkZXIuaCI8YnI+I2luY2x1ZGUgImNwcF9zaGFkZXJfY29uc3RhbnRfcmVnaXN0ZXJfbWFwLmgiPGJyPjxkaXY+PGJyPjwvZGl2PjxkaXY+Ly8gSW5jbHVkZXMgZm9yIFBTMzA8YnI+I2luY2x1ZGUgIm15c2hhZGVyX3BzMzAuaW5jIjwvZGl2PjxkaXY+PGJyPjwvZGl2PjxkaXY+Ly8gSW5jbHVkZXMgZm9yIFZTMzA8YnI+I2luY2x1ZGUgIm15c2hhZGVyX3ZzMzAuaW5jIjwvZGl2PjxkaXY+PGJyPjwvZGl2PjxkaXY+Ly8gc3RydWN0IG9yIGZ1bmN0aW9uIGltcG9ydC4gQ2hlY2sgVkxHIGZvciBhIG1vcmUgY29tcGxleCBleGFtcGxlPGJyPjwvZGl2PjxkaXY+I2luY2x1ZGUgIm15c2hhZGVyX2R4OS5oIjwvZGl2PjxkaXY+PGJyPjwvZGl2PjxkaXY+Ly8gIm5pY2tuYW1lcyIgS2VlcCBpbiBtaW5kIHlvdSBjb3VsZCBhbHNvIGp1c3QgcmVmZXJlbmNlIFNIQURFUl9TQU1QTEVSMCBpbnN0ZWFkIG9mIFNBTVBMRVJfQkFTRVRFWFRVUkU8YnI+Y29uc3QgU2FtcGxlcl90IFNBTVBMRVJfQkFTRVRFWFRVUkUgPSBTSEFERVJfU0FNUExFUjA7PGJyPjwvZGl2Pg==","iscode":false,"isvdccode":true,"contents":[]},{"border":"","hasborder":false,"chapter":"Critical Order","text":"PGRpdj5UaGlzIG5leHQgc2VjdGlvbiB5b3UgY291bGQgcHJhY3RpY2FsbHkgcHV0IGFueXdoZXJlLCBob3dldmVyIDxiPml0IGlzIENSSVRJQ0FMIHRoYXQgaXRzIGluIHRoaXMgU1BFQ0lGSUMgb3JkZXI8YnI+PC9iPllvdSBjYW4gZXZlbiBwdXQgbXVsdGlwbGUgb2YgdGhlc2UgaW50byBvbmUgZmlsZSB0byBkZWNsYXJlIE1VTFRJUExFIHNoYWRlcnMhISEgYnkgY2FsbGluZyAjZGVmaW5lJ3Mgb3IgZnVuY3Rpb25zIHlvdSBjYW4gcmV1c2UgcGFyYW1zIGV0Yy4gYnV0IHRoZSBzdHJ1Y3Qgc2hvdWxkIGJlIHRoZSBzYW1lLCBhbHdheXMuPGJyPjwvZGl2PjxkaXY+QkVHSU5fVlNfU0hBREVSIC0mZ3Q7IEJFR0lOX1NIQURFUl9QQVJBTVMgLSZndDsgRU5EX1NIQURFUl9QQVJBTVMgLSZndDsgU2V0dXAgdmFycyAtJmd0OyBTSEFERVJfSU5JVF9QQVJBTVN7fSAtJmd0OyBTSEFERVJfRkFMTEJBQ0sgLSZndDsgU0hBREVSX0lOSVQge307IC0mZ3Q7IFNIQURFUl9EUkFXIC0mZ3Q7IEVORF9TSEFERVI7PC9kaXY+PGRpdj48YnI+PC9kaXY+PGRpdj5CdXQgYmVmb3JlIHRoYXQgd2Ugd2lsbCBzZXQgdXAgdGhlIHN0cnVjdC4gU28gaWdub3JlIHRoZSAuaCBpbmNsdWRlIGluIHRoZSBsYXN0IGNvZGVibG9jayBvciBtb3ZlIHRoaXMgaW4gdGhlcmU8YnI+PC9kaXY+","iscode":false,"isvdccode":false,"contents":[]},{"border":"","hasborder":false,"chapter":"Shader Struct","text":"c3RydWN0IE15U2hhZGVyX1ZhcnNfdDxicj48ZGl2Pns8L2Rpdj48ZGl2Pi8vIFRoaXMgaXMgaW1wb3J0YW50PGJyPjwvZGl2PiAgICBNeVNoYWRlcl9WYXJzX3QoKTxicj4gICAgezxicj4gICAgICAgIG1lbXNldCh0aGlzLCAweEZGLCBzaXplb2YoKnRoaXMpKTs8YnI+ICAgIH08YnI+PGRpdj48YnI+PC9kaXY+PGRpdj4vLyBFdmVyeSBwYXJhbWV0ZXIgcmVsYXRlZCB2YXJpYWJsZSBtdXN0IGJlIGRlZmluZWQgd2l0aCBhbiBpbnQsIGV2ZW4gYm9vbHMsIHRleHR1cmVzLCBtYXRyaXgncyBhbmQgb3RoZXJzPGJyPjwvZGl2PiAgICBpbnQgYmFzZVRleHR1cmU7PGJyPiAgICBpbnQgYnVtcE1hcDs8YnI+ICAgIGludCBlbnZNYXA7PGJyPiAgICBpbnQgYmFzZVRleHR1cmVGcmFtZTs8YnI+ICAgIGludCBiYXNlVGV4dHVyZVRyYW5zZm9ybTs8YnI+ICAgIGludCBhbHBoYVRlc3RSZWZlcmVuY2U7PGJyPiAgICBpbnQgZmxhc2hsaWdodFRleHR1cmU7PGJyPiAgICBpbnQgZmxhc2hsaWdodFRleHR1cmVGcmFtZTs8YnI+fTs8YnI+","iscode":false,"isvdccode":true,"contents":[]},{"border":"","hasborder":false,"chapter":"Begin Shader","text":"PGRpdj5EZWNsYXJhdGlvbiBvZiBhIHNoYWRlciBzdGFydHMgaGVyZS48L2Rpdj48ZGl2PlRoZSBmaXJzdCBwYXJhbWV0ZXIgaW4gdGhlIGJyYWNrZXRzIGhlcmUgaXMgdGhlIGFjdHVhbCBuYW1lIGZvciB0aGUgc2hhZGVyIHRoYXQgaGFzIHRvIGJlIHdyaXR0ZW4gaW4gdGhlIGZpcnN0IGxpbmUgb2YgdGhlIC5WTVQgZmlsZSB0aGF0cyB0byB1c2UgdGhpcyBzaGFkZXJzLjwvZGl2PjxkaXY+VGhlIGxhc3QgdGhpbmcgaW4gdGhlIGJyYWNrZXQgaXMganVzdCBhIHNtYWxsIGRlc2NyaXB0aW9uIG9mIHRoZSBzaGFkZXIuIFlvdSBjYW4gYWxzbyBkZWNsYXJlIGFzIEJFR0lOX1ZTX1NIQURFUl9GTEFHUyBhbmQgYWRkIG1vcmUgc3R1ZmYgYnV0IHRoaXMgd2lsbCBiZSBlbm91Z2ggZm9yIDk5JSBvZiBjYXNlczxicj48L2Rpdj4=","iscode":false,"isvdccode":false,"contents":[]},{"border":"","hasborder":false,"chapter":"","text":"Ly8gQmVnaW5uaW5nIHRoZSBzaGFkZXI8YnI+QkVHSU5fVlNfU0hBREVSKE1ZX1NIQURFUiwgIlNwZWNpYWwgRWZmZWN0cyBzaGFkZXIgZm9yIG1vZGVscyIp","iscode":false,"isvdccode":true,"contents":[]},{"border":"","hasborder":true,"chapter":"Begin Shader Params","text":"PGRpdj5TaGFkZXIgUGFyYW1zIGFyZSB3aGF0IHlvdSBleHBlY3QuIFRoaW5ncyB5b3UgY2FuIHdyaXRlIGluIGEgdm10IHdpdGggIiQiPC9kaXY+PGRpdj5maXJzdCB3ZSBoYXZlIHRvIGJlZ2luIHRoZSBzaGFkZXIgcGFyYW1zIGhvd2V2ZXI8L2Rpdj48ZGl2PnRoZW4gd2UgZGVjbGFyZSB0aGUgcGFyYW1zPC9kaXY+PGRpdj50aGVuIHdlIGVuZCB0aGUgc2hhZGVyIHBhcmFtcy48L2Rpdj48ZGl2PnRoaXMgaXMgaW1wb3J0YW50LCB5b3UgY2Fubm90IGRlZmluZSB0aGVtIGFueXdoZXJlIGVsc2UuPC9kaXY+PGRpdj48YnI+PC9kaXY+PGRpdj5UeXBlcyBvZiBwYXJhbWV0ZXJzIGluY2x1ZGUgOjwvZGl2Pjx1bD48bGk+Qm9vbGVhbiAoIDEgb3IgMC4gSSBoaWdobHkgc3VnZ2VzdCB1c2luZyBJbnRlZ2VyIHBhcmFtcyBpbnN0ZWFkLiApIDwvbGk+PGxpPkNvbG9yICAoIlt4IHkgel0iKTwvbGk+PGxpPkVudm1hcCAoIG9ic29sZXRlLiB1c2UgdGV4dHVyZSBpbnN0ZWFkICk8L2xpPjxsaT5GbG9hdDwvbGk+PGxpPkZvdXJjYyAoIGRvZXNuJ3QgcmVhbGx5IGhhdmUgYSB1c2UgKTwvbGk+PGxpPkludGVnZXI8L2xpPjxsaT5NYXRlcmlhbCAoIGRvZXNuJ3QgcmVhbGx5IGhhdmUgYSB1c2UgKTwvbGk+PGxpPk1hdHJpeCAoICJjZW50ZXIgMSAxIHNjYWxlIDEgMSByb3RhdGUgMCB0cmFuc2xhdGUgMCAwIiAtIHNlZSB0ZXh0dXJlIHRyYW5zZm9ybSBwYXJhbWV0ZXJzIGZvciBtb3JlIGluZm8gKTwvbGk+PGxpPlN0cmluZyAoIFRleHQsIG5vdCBzdXJlIGlmIHRoZXJlIGV2ZW4gaXMgYSB1c2UgZm9yIHRoaXMuICk8L2xpPjxsaT5UZXh0dXJlICggZXhhbXBsZSA6ICRiYXNldGV4dHVyZSwgJGVudm1hcC4uLiApPC9saT48bGk+VmVjMiAoIlt4IHldIik8L2xpPjxsaT5WZWMzICgiW3ggeSB6XSIpPC9saT48bGk+VmVjNCAoIlt4IHkgeiB3XSIpPGJyPjwvbGk+PC91bD48ZGl2Pjxicj48L2Rpdj48ZGl2Pkl0IGFwcGVhcnMgdGhhdCB0aGUgZmlyc3QgIiIgbWFya3Mgc29tZXRoaW5nIGxpa2UgYSAiZGVmYXVsdCIgdmFsdWUgaG93ZXZlciB0aGlzIGNhbm5vdCBiZSB0cnVzdGVkIGFzIHNvbWUgcGFyYW1ldGVyIHR5cGVzIGxpa2UgZmxvYXQgcGFyYW1zIGFuZCBjb2xvciBwYXJhbXMgc2VlbSB0byB1c2UgYSB0b3RhbGx5IGRpZmZlcmVudCBkZWZhdWx0IHZhbHVlLiBTbyBpbiB0aGlzIGV4YW1wbGUgSSB3aWxsIGxlYXZlIGl0IGVtcHR5Ljxicj5Nb3JlIGFib3V0IHRoaXMgbGF0ZXIuLi48L2Rpdj48ZGl2Pjxicj48L2Rpdj48ZGl2PlRoZSBzZWNvbmQgIiIgaXMgYSBjb21tZW50IHRoYXQgcHJvZ3JhbW1lcnMgY2FuIGxlYXZlIGJlaGluZC4gSSA8aT5hc3N1bWUgPC9pPnRoaXMgaXMgd2hhdCB3aWxsIGJlIHNob3duIGluIHRoZSB2bXQgZWRpdG9yIHdoZW4gdXNpbmcgdGhlIC10b29scyBzdGFydHVwIHBhcmFtZXRlciwgaG93ZXZlciBJIGhhdmVuJ3QgdGVzdGVkIGl0IGJlY2F1c2UgSSBzaW1wbHkgZG9uJ3QgY2FyZS4gSSBtb3JlIG9yIGxlc3Mgd3JpdGUgYSBjb21tZW50IHRoZXJlIHRvIGV4cGxhaW4gdGhpbmdzIGFib3V0IHRoZSBwYXJhbWV0ZXI8YnI+PC9kaXY+","iscode":false,"isvdccode":false,"contents":[]},{"border":"","hasborder":false,"chapter":"","text":"PGRpdj5CRUdJTl9TSEFERVJfUEFSQU1TOzwvZGl2PjxkaXY+PGJyPjwvZGl2PjxkaXY+Ly8gZm9sbG93aW5nIHBhcmFtcyBkb24ndCBoYXZlIHRvIGJlIGRlZmluZWQsIHRoZXkgYXJlIGdsb2JhbGx5IGRlZmluZWQ8L2Rpdj48ZGl2Pi8vICR0cmFuc2x1Y2VudCwgJGFscGhhdGVzdCwgJGJhc2V0ZXh0dXJlLCAkYmFzZXRleHR1cmVmcmFtZSwgJGJhc2V0ZXh0dXJldHJhbnNmb3JtLCAkaGFsZmxhbWJlcnQ8L2Rpdj48ZGl2Pi8vICRiYXNlYWxwaGFlbnZtYXBtYXNrLCAkbm9ybWFsbWFwYWxwaGFlbnZtYXBtYXNrLCAkbXVsdGlwYXNzLCAkbm9jdWxsLCAkYWxsb3dhbHBoYXRvY292ZXJhZ2U8L2Rpdj48ZGl2Pi8vIGZsYXNobGlnaHR0ZXh0dXJlLCBmbGFzaGxpZ2h0dGV4dHVyZWZyYW1lLCBjZXJ0YWluIGJvb2xzIGxpa2UgJG1vZGVsLi4uPC9kaXY+PGRpdj48YnI+PC9kaXY+PGRpdj4vLyBGdW5uaWx5IGVub3VnaCwgJGFscGhhdGVzdHJlZmVyZW5jZSBpcyBOT1QgYSBnbG9iYWwgcGFyYW1ldGVyPC9kaXY+PGRpdj48YnI+PC9kaXY+PGRpdj5TSEFERVJfUEFSQU0oQlVNUE1BUCwgU0hBREVSX1BBUkFNX1RZUEVfVEVYVFVSRSwgIiIsICJidW1wIG1hcCIpPC9kaXY+PGRpdj5TSEFERVJfUEFSQU0oRU5WTUFQLCBTSEFERVJfUEFSQU1fVFlQRV9FTlZNQVAsICIiLCAiU2V0IHRoZSBjdWJlbWFwIGZvciB0aGlzIG1hdGVyaWFsLiIpPGJyPjwvZGl2PjxkaXY+U0hBREVSX1BBUkFNKEVOVk1BUFRJTlQsIFNIQURFUl9QQVJBTV9UWVBFX0NPTE9SLCAiWzEgMSAxXSIsICJlbnZtYXAgdGludCIpPGJyPlNIQURFUl9QQVJBTShFTlZNQVBDT05UUkFTVCwgU0hBREVSX1BBUkFNX1RZUEVfRkxPQVQsICIiLCAiZW52bWFwIGNvbnRyYXN0Iik8YnI+PC9kaXY+PGRpdj48YnI+PC9kaXY+PGRpdj5FTkRfU0hBREVSX1BBUkFNUzs8YnI+PC9kaXY+","iscode":false,"isvdccode":true,"contents":[]},{"border":"","hasborder":false,"chapter":"Setup vars","text":"PGRpdj5IZXJlIGlzIHdoZXJlIHdlIGxpbmsgb3VyIHN0cnVjdCBzdHVmZiB0byBhIHBhcmFtZXRlcjwvZGl2PjxkaXY+VGhpcyBpcyBpbXBvcnRhbnQgc28gdGhhdCB3ZSBjYW4gcmVhZCBhbmQgYXNzaWduIHRleHR1cmVzIHRvIHNhbXBsZXJzIG9yIGNoZWNrIHRoZSBwYXJhbWV0ZXJzIGZvciB0aGVpciB2YWx1ZXMgd2l0aGluIHRoZSBzaGFkZXIgY29kZS48YnI+PC9kaXY+","iscode":false,"isvdccode":false,"contents":[]},{"border":"","hasborder":false,"chapter":"","text":"dm9pZCBTZXR1cFZhcnMoSU1hdGVyaWFsVmFyKiogcGFyYW1zLCBNeVNoYWRlcl9WYXJzX3QmYW1wOyBpbmZvKTxicj48ZGl2Pns8L2Rpdj48ZGl2Pi8vIFRoZXNlIGFyZSBnbG9iYWxseSBkZWZpbmVkIGFuZCBjYW4ganVzdCBiZSBsaW5rZWQgYXMgc3VjaDxicj48L2Rpdj48ZGl2PmluZm8ubV9uQmFzZVRleHR1cmUgPSBCQVNFVEVYVFVSRTs8L2Rpdj48ZGl2PmluZm8ubV9uQmFzZVRleHR1cmVGcmFtZSA9IEZSQU1FOzwvZGl2PjxkaXY+aW5mby5tX25CYXNlVGV4dHVyZVRyYW5zZm9ybSA9IEJBU0VURVhUVVJFVFJBTlNGT1JNOzwvZGl2PjxkaXY+aW5mby5tX25GbGFzaGxpZ2h0VGV4dHVyZSA9IEZMQVNITElHSFRURVhUVVJFOzwvZGl2PjxkaXY+aW5mby5tX25GbGFzaGxpZ2h0VGV4dHVyZUZyYW1lID0gRkxBU0hMSUdIVFRFWFRVUkVGUkFNRTs8L2Rpdj48ZGl2Pjxicj48L2Rpdj48ZGl2Pi8vIGZyb20gb3VyIHBhcmFtZXRlciBleGFtcGxlPC9kaXY+PGRpdj5pbmZvLm1fbkJ1bXBNYXAgPSBCVU1QTUFQOzxicj48L2Rpdj48ZGl2PmluZm8ubV9uRW52TWFwID0gRU5WTUFQOzwvZGl2PjxkaXY+aW5mby5tX25FbnZNYXBUaW50ID0gRU5WTUFQVElOVDs8L2Rpdj48ZGl2PmluZm8ubV9uRW52TWFwQ29udHJhc3QgPSBFTlZNQVBDT05UUkFTVDs8YnI+PC9kaXY+PGRpdj59Ozxicj48L2Rpdj4=","iscode":false,"isvdccode":true,"contents":[]},{"border":"","hasborder":false,"chapter":"Init Params","text":"PGRpdj5Jbml0aWFsaXppbmcgdGhlIHBhcmFtZXRlcnMgaXMgYSBjcnVjaWFsIHN0ZXAgc29tZXRpbWVzPC9kaXY+PGRpdj5Gb3IgZXhhbXBsZSBpZiB5b3Ugd2FudCB0byBlbnN1cmUgYSBub3JtYWwgbWFwIG9mIHNvbWUga2luZCBpcyBsb2FkZWQsIGhlcmUgeW91IGNhbiBkZWZhdWx0IHRoZSBwYXJhbWV0ZXIgdG8gc29tZXRoaW5nIGlmIGl0cyBub3Qgc2V0LiBTbyBsZXRzIGRvIHRoYXQ8L2Rpdj48ZGl2PkFkZGl0aW9uYWxseSB3ZSBhcmUgZ29pbmcgdG8gc2V0IHRoZSBmbGFzaGxpZ2h0dGV4dHVyZSBhcyB0aGVzZSBtaWdodCBoYXZlIHRvIGJlIGRpZmZlcmVudCBkZXBlbmRpbmcgb24gdGhlIGhhcmR3YXJlIHRoZSBlbmR1c2VyIHdpbGwgaGF2ZTxicj48L2Rpdj4=","iscode":false,"isvdccode":false,"contents":[]},{"border":"","hasborder":false,"chapter":"","text":"U0hBREVSX0lOSVRfUEFSQU1TKCk8YnI+PGRpdj57PC9kaXY+PGRpdj4vLyBGb3JjZSBlbnZpcm9ubWVudCBtYXBwaW5nPGJyPjwvZGl2PjxkaXY+ICAgIGlmICghcGFyYW1zW0VOVk1BUF0tJmd0O0lzRGVmaW5lZCgpKTxicj4gICAgICAgIHBhcmFtc1tFTlZNQVBdLSZndDtTZXRTdHJpbmdWYWx1ZSgiZW52X2N1YmVtYXAiKTs8YnI+PC9kaXY+PGRpdj48YnI+PC9kaXY+PGRpdj4gICAgaWYgKCFwYXJhbXNbQlVNUE1BUF0tJmd0O0lzRGVmaW5lZCgpKTxicj4gICAgICAgIHBhcmFtc1tCVU1QTUFQXS0mZ3Q7U2V0U3RyaW5nVmFsdWUoImRldi9mbGF0X25vcm1hbCIpOzwvZGl2PjxkaXY+PGJyPjwvZGl2PjxkaXY+ICAgIC8vIENoZWNrIGlmIHRoZSBoYXJkd2FyZSBzdXBwb3J0cyBmbGFzaGxpZ2h0IGJvcmRlciBjb2xvcjxicj4gICAgaWYgKGdfcEhhcmR3YXJlQ29uZmlnLSZndDtTdXBwb3J0c0JvcmRlckNvbG9yKCkpPGJyPiAgICB7PGJyPiAgICAgICAgcGFyYW1zW0ZMQVNITElHSFRURVhUVVJFXS0mZ3Q7U2V0U3RyaW5nVmFsdWUoImVmZmVjdHMvZmxhc2hsaWdodF9ib3JkZXIiKTs8YnI+ICAgIH08YnI+ICAgIGVsc2U8YnI+ICAgIHs8YnI+ICAgICAgICBwYXJhbXNbRkxBU0hMSUdIVFRFWFRVUkVdLSZndDtTZXRTdHJpbmdWYWx1ZSgiZWZmZWN0cy9mbGFzaGxpZ2h0MDAxIik7PGJyPiAgICB9PGJyPjwvZGl2PjxkaXY+fTs8YnI+PC9kaXY+","iscode":false,"isvdccode":true,"contents":[]},{"border":"","hasborder":false,"chapter":"Shader Fallback","text":"PGRpdj5GYWxsYmFjayBTaGFkZXJzIGRvbid0IG5lY2Vzc2FyaWx5IGhhdmUgdG8gYmUgZGVjbGFyZWQgYXQgdGhpcyBzdGFnZS48L2Rpdj48ZGl2PlRoaXMgbGV0cyB5b3UgZGVmaW5lIGEgZmFsbGJhY2ssIHdoYXQgdGhhdCBtZWFucyBpcyB0aGF0IHdoZW4gdGhlIHVzZXIgdHJpZXMgdG8gdXNlIGEgY2VydGFpbiBzaGFkZXJuYW1lLCB5b3UgY2FuIG92ZXJ3cml0ZSBpdCB3aXRoIGFub3RoZXIgb25lLiBUaGlzIGFsbG93cyB5b3UgdG8gZm9yIGV4YW1wbGUgb3ZlcndyaXRlIHRoZSB1c2VkIHNoYWRlci48YnI+aW5zdGVhZCBvZiAibXlfc2hhZGVyMSIgeW91IGNvdWxkIGZvcmNlIGl0IHRvIHVzZSAibXlfc2hhZGVyIjxicj5LZWVwIGluIG1pbmQgdGhhdCBvdmVyd3JpdGluZyBiYXNlc2hhZGVycyBpcyBOT1QgcG9zc2libGUgdW5sZXNzIHlvdSB1c2UgdGhlIG1hdGVyaWFsIHBhc3N0aHJ1IHN5c3RlbSwgd2hpY2ggSSdtIG5vdCBnb2luZyBvdXQgb2YgbXkgd2F5IHRvIGV4cGxhaW4uIFRoZSBiYXNlc2hhZGVycyBhcmUgdGVycmlibGUgYW55d2F5cywgd3JpdGUgeW91ciBvd24gOikgPC9kaXY+PGRpdj48YnI+PC9kaXY+PGRpdj5BbHRlcm5hdGl2ZWx5IGlmIGZvciB3aGF0ZXZlciByZWFzb24gaXQgY2Fubm90IHVzZSB0aGlzIHNoYWRlciwgdGhpcyBjYW4gYWxzbyByZXR1cm4gYSBkaWZmZXJlbnQgc2hhZGVybmFtZS48L2Rpdj48ZGl2PkZvciB0aGlzIGRvY3VtZW50IHdlIHdpbGwganVzdCBnaXZlIHRoZSByZW5kZXJlciBhIGhhcmQgdGltZSBsb2w8YnI+PC9kaXY+","iscode":false,"isvdccode":false,"contents":[]},{"border":"","hasborder":false,"chapter":"","text":"U0hBREVSX0ZBTExCQUNLPGJyPns8YnI+ICAgIHJldHVybiAwOzxicj59Ow==","iscode":false,"isvdccode":true,"contents":[]},{"border":"","hasborder":true,"chapter":"Shader Initialization","text":"PGRpdj5JbiB0aGUgc2hhZGVyIGluaXQgd2Ugd2lsbCBsb2FkIHRleHR1cmVzLCBpdHMgaW1wb3J0YW50IGl0cyBkb25lIGF0IHRoaXMgc3RhZ2UuIElmIHlvdXIgc2hhZGVyIGZhaWxzIHRvIGxvYWQgYSB0ZXh0dXJlIGFuZCB0cmllcyB0byBzZXQgaXQgbGF0ZXIsIHRoZSBnYW1lIHdpbGwgdGhyb3cgYW4gZXJyb3IuIFNvbWV0aGluZyBzb21ldGhpbmcgInRyaWVkIHRvIHVzZSB0ZXh0dXJlIHZhciB0aGF0IGlzIG5vIHRleHR1cmUiLi4uIGFsb25nIHRob3NlIGxpbmVzPC9kaXY+PGRpdj48YnI+PC9kaXY+PGRpdj5DdWJlbWFwcyBtdXN0IGJlIGxvYWRlZCB3aXRoIExvYWRDdWJlTWFwPC9kaXY+PGRpdj5CdW1wbWFwcyBkb24ndCBuZWNlc3NhcmlseSBhcHBlYXIgdG8gcmVxdWlyZSBsb2FkaW5nIHdpdGggTG9hZEJ1bXBNYXAsIEkgd291bGQgZG8gaXQgYW55d2F5cyBiZWNhdXNlIG1heWJlIHRoZXJlJ3Mgc29tZSBzcGVjaWZpYyByZWFzb24gYmVoaW5kIGl0IHRoYXQgSSBhbSBub3QgYXdhcmUgb2YuLi48L2Rpdj48ZGl2Pk90aGVyIHRleHR1cmVzIGNhbiBkZWZpbml0ZWx5IGp1c3QgdXNlIExvYWRUZXh0dXJlPC9kaXY+PGRpdj48YnI+PC9kaXY+PGRpdj5BdCB0aGUgYmVnaW5uaW5nIG9mIHRoZSBzaGFkZXIgaW5pdCB3ZSBoYXZlIHRvIGRlY2xhcmUgcGFyYW1zLCAiU2V0dXAgVmFycyIgd2lsbCBjb21lIGluIGhhbmR5IGhlcmUuPC9kaXY+PGRpdj5MYXRlciB3ZSBhbHNvIGZvcmNlLXNldCBzb21lIGZsYWdzIHRoYXQgYXJlIG9mdGVuIHJlcXVpcmVkIGZvciBjZXJ0YWluIHRoaW5ncyBsaWtlIHRoZSBmbGFzaGxpZ2h0IG9yIGJ1bXBlZCBsaWdodGluZzxicj48L2Rpdj4=","iscode":false,"isvdccode":false,"contents":[]},{"border":"","hasborder":true,"chapter":"","text":"c2V4","iscode":false,"isvdccode":false,"contents":[]},{"border":"","hasborder":true,"chapter":"","text":"","iscode":false,"isvdccode":false,"contents":[]}],"selfid":"3cbad2ae42a2a63d999d344ca664eeb0"}