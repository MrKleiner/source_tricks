{"atitle":"Issues in building Cubemaps","boxes":[{"text":"You have issues building Cubemaps? Well fear not, this guide should give you an overview for how to build them.<br><br>Well lets start with some basic knowledge that is required to actually know why we have to build Cubemaps and how.<br><br>If you want Cubemaps in your map, you will need the entity that actually \"makes them\"<br>This entity is called env_cubemap.<br>","contents":[{"imguseurl":"1","imgsize":"400","imgurl":"https://i.imgur.com/oCQvVHB.png"}],"border_w":"5px 0px 0px","border_c":"rgb(100, 218, 255)","chapter":"Basic Knowledge"},{"text":"From the position of each env_cubemap a Cubemap will be built. The resolution set within the entity sets how high-res the actual Cubemap will be.<br>This has several implications :<br>-A lot of High-Res Cubemaps will bloat the file-size of your .bsp file. So use high res ones sparingly.<br>-Models and Brushes that haven't been assigned on an env_cubemap will automatically pick the closest one in proximity.<br>If you only have one Cubemap on the entire map, Cubemap reflections in locations far away from it might look unbelievable.<br>-Spamming env_cubemap does not make your map look better.<br><br>Building Cubemaps requires your game to be set to four times the resolution of the highest resolution Cubemap in the map.<br>This means in order to build a 128x Cubemap, the game resolution must <i>at least</i> be 512x512. 720x576 or higher.<br>256x Cubemaps are by default supported and ones up to 2048x can be made by editing the FGD.<br><br>However to build a 256x Cubemap you already need a resolution of <i>at least</i> 1024x1024.<br>The usual 1080p monitor should still be able to handle it, but anything above it either requires more resolution or simulated resolution.<br>","contents":[],"border_w":"0px","border_c":"rgb(100, 218, 255)","chapter":"Having problems?"},{"text":"<div>Building Cubemaps can be different depending on the Source Branch you are mapping for.</div><div><br></div><div>Check below for further details.<br></div>","contents":[],"border_w":"5px 0px 0px","border_c":"rgb(100, 218, 255)","chapter":"HL2, HL2EP1, HL2EP2, SDK2013SP & Mapbase"},{"text":"<b>HL2, HL2EP1, HL2EP2, SDK2013SP &amp; Mapbase</b><br><br><div>You are probably running into the issue that no matter how often you spam the \"buildcubemaps\" command your maps don't actually happen to get reflections. This has a reason.</div><div><br></div><div>The reason behind this is the way the map gets compiled.<br>By default, each env_cubemap gets assigned a VTF file within the bsp file, a \"default cubemap\"</div><div><br>The issue : This default Cubemap does not get overwritten when building Cubemaps.</div><div><br></div><div>What can you do? Well there is serveral approaches to this Problem.</div>","contents":[],"border_w":"5px 0px 0px","border_c":"rgb(100, 218, 255)","chapter":""},{"text":"1. Custom compilers.<br><br>A custom VBSP can alleviate the problem.<br>If you are mapping for Mapbase, you <i>must</i> use <i>any</i> custom compiler regardless of if you have the issue or not.<br>This is because Mapbase uses custom shaders and the default VBSP cannot recognize such.<br>The Mapbase VBSP doesn't generate a default cubemap by default and can therefore be used to make proper ones.<br><br>Alternatively the Slammin' VBSP allows for a parameter called \"-nodefaultcubemap\"<br><div>This will make it so there is no default cubemap. You know it's working, when you have missing textures as reflections. Turn Mat_Specular 0 and build cubemaps, once you set mat_specular back to 1 you should have reflections.</div><div><i>It might be needed to restart the game, disconnect from the map and load the map again, or to do mat_reloadallmaterials in order for them to show up</i><br></div>","contents":[],"border_w":"5px 0px 0px","border_c":"rgb(100, 218, 255)","chapter":""},{"text":"<div>2. Removing the default Cubemap using <font color=\"#7dffff\"><a href=\"http://www.riintouge.com/VIDE/\"><u><b>Vide</b></u></a><br></font></div><div><br></div><div><br></div>","contents":[],"border_w":"5px 0px 0px","border_c":"rgb(100, 218, 255)","chapter":"SDK2013MP & Team Fortress 2"},{"text":"<u><b>SDK2013MP and Team Fortress 2</b></u><br><br>Neither of these should have issues. Both SDK2013MP and TF2.<br>Apparently, in TF2 there is no default Cubemaps. If you see a missing texture you can build the Cubemaps and they will be filled in. ( Remember to turn Mat_Specular to 0 before doing so or your reflections will include the missing texture )<br><br>When compiling in SDK2013MP a default Cubemap gets created. However, unlike SDK2013SP, just building Cubemaps will overwrite these. If this is not the case, use custom compilers that do not create them. Or remove them from the .bsp file using tools such as <font color=\"#7dffff\"><a href=\"http://www.riintouge.com/VIDE/\"><u><b>Vide</b></u></a></font>","contents":[],"border_w":"5px 0px 0px","border_c":"rgb(100, 218, 255) rgb(240, 240, 240) rgb(240, 240, 240)","chapter":""}],"selfid":"0ca13ec97224bfe27af4813097a3c1bd"}